<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all" name="testingsrv">

<!-- ************************************************
Test Service Project

Init all Parameters
***************************************************** -->
<target name="init">
   <property environment="env"/>
   <property name="build.dir" value="${basedir}/build"/>

   <mkdir dir="${build.dir}"/>
   <mkdir dir="classes"/>

</target>

<!-- ************************************************
Build all Dependancies
***************************************************** -->
<target depends="init" name="dependancies">

   <!-- build any dependancy services here -->   
   
   <!-- bootstrap -->
   <ant dir="../bootstrap" target="build"/>

</target>

<!-- ************************************************
Compile all Source and copy Resources to classpath
***************************************************** -->
<target name="compile" depends="dependancies" description="Compile all Java Files and Copy Resources">
   <javac debug="true" deprecation="false" destdir="classes" srcdir="src">
      <classpath>
         <pathelement location="${build.dir}/boot.jar"/>
         <pathelement location="3rdPartyLib/junit.jar"/>
      </classpath> 
   </javac>

   <copy todir="classes">
       <fileset dir="src">
          <include name="**/*.au"/>
          <include name="**/*.gif"/>
          <include name="**/*.jpg"/>
          <include name="**/*.png"/>
          <include name="**/*.properties"/>
          <exclude name="**/*.class"/>
       </fileset>
   </copy>
</target>

<!-- ************************************************
JAR all Classes and Resources
***************************************************** -->
<target depends="init, compile" description="Creates Jars for all modules" name="jar">
   <mkdir dir="${build.dir}"/>
   <mkdir dir="${build.dir}/${ant.project.name}"/>

   <!-- Boot Jar -->
   <jar basedir="classes" compress="true" jarfile="${build.dir}/${ant.project.name}/${ant.project.name}.jar">
       <exclude name="**/*.java"/>
       <include name="org/xito/testingsrv/**"/>

       <manifest>
       <attribute name="Built-By" value="${user.name}"/>
       <section name="org/xito/testingsrv/">
         <attribute name="Specification-Title" value="${ant.project.name}"/>
         <attribute name="Specification-Version" value="${build.number}"/>
         <attribute name="Specification-Vendor" value="xito"/>
         <attribute name="Implementation-Title" value="${ant.project.name}"/>
         <attribute name="Implementation-Version" value="${build.number}"/>
         <attribute name="Implementation-Vendor" value="xito"/>
       </section>
       </manifest>
   </jar>
</target>

<!-- ************************************************
Build Entire Project
***************************************************** -->
<target name="build" depends="jar">

   <!-- Copy libs to build dir -->
   <copy todir="${build.dir}/${ant.project.name}">
      <fileset dir="3rdPartyLib">
         <include name="junit.jar"/>
      </fileset>
   </copy>  

   <!-- Copy all Resources -->
   <copy todir="${build.dir}">
      <fileset dir="resources">
         <include name="**/*.*"/>
      </fileset>
   </copy>
      
   <echo message="${ant.project.name} built!"/>
</target>

<target name="all" depends="build"/>
   
<!-- ************************************************
Create Dist for this Project
***************************************************** -->
<target name="dist" depends="all" description="Creates Distribution">

   <mkdir dir="dist"/>
   <mkdir dir="dist-${build.number}"/>
   
   <copy todir="dist">
       <fileset dir="${build.dir}" includes="**/*.*"/>
   </copy>

   <!-- Create zip archive of win32 dist -->
   <zip destfile="dist-${build.number}/${ant.project.name}-${build.number}.zip">
       <fileset dir="dist"/>
   </zip>

   <!-- create src zip -->
   <antcall target="dist_src"/>

   <delete dir="dist"/>
</target>

<!-- ************************************************
Create Source Distribution for this Project
***************************************************** -->
<target depends="init" description="Creates SRC Distribution" name="dist_src">

   <mkdir dir="dist-${build.number}"/>
   <!-- Create zip archive of src -->
   <zip destfile="dist-${build.number}/${ant.project.name}-${build.number}-src.zip">
       <fileset dir="${basedir}">
         <include name="jnlp/**"/>
         <include name="src/**"/>
         <include name="src_test/**"/>
         <include name="win32/**"/>
         <include name="build.number"/>
         <include name="build.xml"/>
       </fileset>
   </zip>
</target>

<!-- ************************************************
Debug this Project
***************************************************** -->
<target depends="all" name="debug" description="Debug">
<echo message="Debug running on port:8000"/>
<java classname="" failonerror="false" fork="true">
    <classpath>
        
    </classpath>
    <arg line=""/>
    <jvmarg line="-Xnoagent -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8000 -Xbootclasspath/a:${env.JAVA_HOME}/lib/tools.jar"/>
</java>
</target>

<!-- ************************************************
Test this Project
***************************************************** -->
<target depends="compile" name="test" description="Run All Tests">
<java classname="junit.textui.TestRunner" failonerror="true" fork="true">
    <classpath>
        
    </classpath>
    <arg line=""/>
</java>
</target>

<!-- ************************************************
Create JavaDoc for this Project
***************************************************** -->
<target depends="init" description="Generate Javadoc for the src Tree" name="javadoc">
<delete dir="javadoc"/>
<mkdir dir="javadoc"/>
<javadoc destdir="javadoc" packagenames="org.xito.*">
    <sourcepath>
        <pathelement location="${src.dir}"/>
    </sourcepath>
</javadoc>
</target>

<!-- ************************************************
Clean this Build
***************************************************** -->
<target depends="init" description="Clean all build products." name="clean">
   <delete dir="classes"/>
   <delete dir="build"/>
   
</target>

</project>
